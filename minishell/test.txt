/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   find_cmd_path.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/17 16:41:37 by garside           #+#    #+#             */
/*   Updated: 2025/05/30 16:55:28 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"

char	*try_paths(char **paths, char *cmd)
{
	int		i;
	char	*resfinal;

	i = 0;
	while (paths[i])
	{
		resfinal = ft_strjoin_three(paths[i], "/", cmd);
		if (!resfinal)
		{
			free_split(paths);
			return (NULL);
		}
		if (access(resfinal, X_OK) != -1)
		{
			free_split(paths);
			return (resfinal);
		}
		free(resfinal);
		i++;
	}
	free_split(paths);
	return (NULL);
}

char	*find_cmd_path(char *cmd, t_data *data)
{
	char	*path_env;
	char	**paths;
	char	*cmd_path;

	if (!cmd)
		return (NULL);
	if (cmd[0] == '/')
	{
		if (access(cmd, X_OK) != -1)
			return (cmd);
		else
			return (NULL);
	}
	path_env = ft_get_env("PATH", data);
	if (!path_env)
		return (NULL);
	paths = ft_split(path_env, ':');
	free(path_env);
	if (!paths)
		return (NULL);
	cmd_path = try_paths(paths, cmd);
	if (!cmd_path)
		return (NULL);
	return (cmd_path);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_cd.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/17 17:24:03 by garside           #+#    #+#             */
/*   Updated: 2025/05/23 11:44:19 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"

int	update_pwd_env(t_data *data)
{
	char	cwd[1024];

	if (getcwd(cwd, sizeof(cwd)) == NULL)
		return (ft_putstr_fd("pwd failed\n", 2), 1);
	ft_replace_in_env(data, "PWD", cwd);
	return (0);
}

int	update_oldpwd_and_chdir(t_data *data, char *path)
{
	char	cwd[1024];

	if (getcwd(cwd, sizeof(cwd)) == NULL)
		return (ft_putstr_fd("pwd failed\n", 2), 1);
	ft_replace_in_env(data, "OLDPWD", cwd);
	if (chdir(path) == -1)
		return (ft_putstr_fd("chdir failed\n", 2), 1);
	return (0);
}

int	cd_to_home(t_data *data)
{
	char	*home;

	home = ft_get_env("HOME", data);
	if (!home)
		return (ft_putstr_fd("cd: HOME not set\n", 2), 1);
	if (update_oldpwd_and_chdir(data, home))
		return (free(home), 1);
	free(home);
	return (0);
}

int	cd_to_path(t_data *data, char *path)
{
	if (update_oldpwd_and_chdir(data, path))
	{
		ft_putstr_fd("cd: ", 2);
		ft_putstr_fd(path, 2);
		ft_putstr_fd(": No such file or directory\n", 2);
		return (1);
	}
	return (0);
}

int	ft_cd(t_data *data)
{
	t_cmd	*cmd;

	cmd = data->cmd_list;
	if (!cmd->args[1])
	{
		if (cd_to_home(data))
			return (1);
	}
	else if (cmd->args[2])
		return (ft_putstr_fd("cd: too many arguments\n", 2), 1);
	else
	{
		if (cd_to_path(data, cmd->args[1]))
			return (1);
	}
	return (update_pwd_env(data));
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_echo.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/17 18:42:46 by garside           #+#    #+#             */
/*   Updated: 2025/05/23 11:44:22 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"

static int	is_n_flag(char *str)
{
	int	i;

	if (!str || str[0] != '-' || str[1] != 'n')
		return (0);
	i = 2;
	while (str[i] == 'n')
		i++;
	return (str[i] == '\0');
}

int	ft_echo(t_data *data, t_cmd *cmd)
{
	int	newline;
	int	i;

	(void)data;
	newline = 1;
	i = 1;
	if (!cmd || !cmd->args)
		return (printf("\n"), 0);
	while (cmd->args[i] && is_n_flag(cmd->args[i]))
	{
		newline = 0;
		i++;
	}
	while (cmd->args[i])
	{
		printf("%s", cmd->args[i]);
		if (cmd->args[i + 1])
			printf(" ");
		i++;
	}
	if (newline)
		printf("\n");
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_env.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/17 18:35:45 by garside           #+#    #+#             */
/*   Updated: 2025/05/31 15:30:13 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"

int	ft_env(t_data *data)
{
	t_env	*i;

	i = data->env;
	while (i)
	{
		ft_printf("%s=%s\n", i->name, i->content);
		i = i->next;
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_exec_1.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/23 12:13:30 by bcaumont          #+#    #+#             */
/*   Updated: 2025/05/27 15:26:32 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"

void	wait_for_pipeline(pid_t last_pid, t_data *data)
{
	int		status;
	pid_t	wpid;

	(void)data;
	wpid = wait(&status);
	while (wpid > 0)
	{
		if (wpid == last_pid)
			g_status = WEXITSTATUS(status);
		wpid = wait(&status);
	}
}

int	exec_line(t_data *data, t_cmd *cmd)
{
	pid_t	last_pid;

	if (!cmd->next)
		return (handle_single_command(data, cmd));
	last_pid = handle_pipeline(data, cmd);
	if (last_pid == -1)
		return (CODE_FAIL);
	wait_for_pipeline(last_pid, data);
	if (cmd)
		free_cmd_list(data);
	return (g_status);
}

int	init_pipe_if_needed(t_cmd *cmd)
{
	if (cmd->next && pipe(cmd->pipe_fd) == -1)
	{
		perror("pipe error");
		return (-1);
	}
	if (!cmd->next)
	{
		cmd->pipe_fd[0] = -1;
		cmd->pipe_fd[1] = -1;
	}
	return (0);
}

void	update_fds_after_process(t_cmd *cmd, t_exec_fd *fds)
{
	if (fds->prev_fd != -1)
		safe_close(fds->prev_fd);
	if (cmd->next)
	{
		safe_close(cmd->pipe_fd[1]);
		fds->prev_fd = cmd->pipe_fd[0];
	}
	else
		fds->prev_fd = -1;
}

pid_t	handle_pipeline(t_data *data, t_cmd *cmd)
{
	t_exec_fd	fds;
	pid_t		last_pid;

	fds.prev_fd = -1;
	last_pid = -1;
	while (cmd)
	{
		if (init_pipe_if_needed(cmd) == -1)
			return (-1);
		last_pid = ft_process(data, cmd, &fds);
		update_fds_after_process(cmd, &fds);
		cmd = cmd->next;
	}
	if (fds.prev_fd != -1)
		safe_close(fds.prev_fd);
	return (last_pid);
}


/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_exec_2.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/27 19:27:12 by bcaumont          #+#    #+#             */
/*   Updated: 2025/05/27 19:27:27 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"

void	exec_child_process(t_data *data, t_exec_fd *fds)
{
	char	**cmd;
	char	*path;

	cmd = ft_get_cmd(data);
	path = get_cmd_path(data, cmd);
	close(fds->saved_stdin);
	close(fds->saved_stdout);
	if (!path)
	{
		ft_putstr_fd("minishell:", 2);
		ft_putstr_fd(data->token->value, 2);
		ft_putstr_fd(": command not found\n", 2);
		free_cmd_list(data);
		free_data(data);
		free_split(cmd);
		exit(127);
	}
	execve(path, cmd, data->envp);
	ft_putstr_fd("execve failed\n", 2);
	free_cmd_list(data);
	free_data(data);
	free_split(cmd);
	free(path);
	exit(127);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_exec_utils_1.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/30 13:45:23 by garside           #+#    #+#             */
/*   Updated: 2025/05/28 17:33:45 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"

char	**ft_get_cmd(t_data *data)
{
	t_token	*i;
	char	**cmd;
	int		len;
	int		j;

	len = 0;
	i = data->token;
	while (i && i->type == WORD)
	{
		len++;
		i = i->next;
	}
	cmd = malloc(sizeof(char *) * (len + 1));
	i = data->token;
	j = 0;
	while (i && i->type == WORD)
	{
		cmd[j++] = ft_strdup(i->value);
		i = i->next;
	}
	cmd[j] = NULL;
	return (cmd);
}

void	ft_replace_in_env(t_data *data, char *name, char *value)
{
	t_env	*i;

	i = data->env;
	while (i)
	{
		if (ft_strcmp(i->name, name) == 0)
		{
			free(i->content);
			i->content = ft_strdup(value);
			return ;
		}
		i = i->next;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_exec.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/17 16:09:23 by garside           #+#    #+#             */
/*   Updated: 2025/05/27 15:04:37 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"

int	set_fd_cloexec(int fd)
{
	int	flags;

	flags = fcntl(fd, F_GETFD);
	if (flags == -1)
		return (-1);
	flags |= FD_CLOEXEC;
	if (fcntl(fd, F_SETFD, flags) == -1)
		return (-1);
	return (0);
}

char	*get_cmd_path(t_data *data, char **cmd)
{
	if (data->token->value[0] == '/')
		return (ft_strdup(cmd[0]));
	return (find_cmd_path(cmd[0], data));
}

int	ft_shell(t_data *data, t_exec_fd *fds)
{
	pid_t	pid;
	int		status;

	pid = fork();
	if (pid == -1)
		return (ft_putstr_fd("fork failed\n", 2), 1);
	if (pid == 0)
		exec_child_process(data, fds);
	waitpid(pid, &status, 0);
	return ((status >> 8) & 0xFF);
}

int	which_command(t_data *data, t_cmd *cmd, t_exec_fd *fds)
{
	if (ft_strcmp(cmd->args[0], "export") == 0)
		return (ft_export(data));
	if (ft_strcmp(cmd->args[0], "unset") == 0)
		return (ft_unset(data));
	if (ft_strcmp(cmd->args[0], "exit") == 0)
		return (ft_exit(data, cmd, fds));
	if (ft_strcmp(cmd->args[0], "echo") == 0)
		return (ft_echo(data, cmd));
	if (ft_strcmp(cmd->args[0], "pwd") == 0)
		return (ft_pwd());
	if (ft_strcmp(cmd->args[0], "env") == 0)
		return (ft_env(data));
	if (ft_strcmp(cmd->args[0], "cd") == 0)
		return (ft_cd(data));
	if (ft_strncmp(cmd->args[0], "./", 2) == 0)
		return (ft_executables(data, cmd, fds));
	return (ft_shell(data, fds));
}

int	handle_single_command(t_data *data, t_cmd *cmd)
{
	t_exec_fd	fds;

	fds.prev_fd = -1;
	fds.saved_stdin = dup(STDIN_FILENO);
	fds.saved_stdout = dup(STDOUT_FILENO);
	if (fds.saved_stdin < 0 || fds.saved_stdout < 0)
		return (perror("dup"), CODE_FAIL);
	if (redirect_management(cmd, &fds) == -1)
	{
		set_fd_cloexec(fds.saved_stdin);
		set_fd_cloexec(fds.saved_stdout);
		return (CODE_FAIL);
	}
	g_status = which_command(data, cmd, &fds);
	dup2(fds.saved_stdin, STDIN_FILENO);
	dup2(fds.saved_stdout, STDOUT_FILENO);
	close(fds.saved_stdin);
	close(fds.saved_stdout);
	return (g_status);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_executables.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/17 17:09:03 by garside           #+#    #+#             */
/*   Updated: 2025/05/28 17:16:24 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"

int	ft_executables(t_data *data, t_cmd *cmd, t_exec_fd *fds)
{
	pid_t	pid;
	int		status;

	pid = fork();
	if (pid == -1)
		return (ft_putstr_fd("fork failed\n", 2), 127);
	if (pid == 0)
		ft_execve_child(data, cmd, fds);
	waitpid(pid, &status, 0);
	return ((status >> 8) & 0xFF);
}

void	ft_execve_child(t_data *data, t_cmd *cmd, t_exec_fd *fds)
{
	if (!cmd || !cmd->args || !cmd->args[0])
		ft_exit_with_error(data, cmd, "Error: invalid command or arguments\n",
			1);
	ft_restore_std(fds);
	ft_check_directory(data, cmd);
	execve(cmd->args[0], cmd->args, data->envp);
	ft_putstr_fd(cmd->args[0], 2);
	ft_putstr_fd(": No such file or directory\n", 2);
	free_cmd_list(data);
	free_data(data);
	exit(127);
}

void	ft_restore_std(t_exec_fd *fds)
{
	if (fds->saved_stdin != STDIN_FILENO)
	{
		dup2(fds->saved_stdin, STDIN_FILENO);
		close(fds->saved_stdin);
	}
	if (fds->saved_stdout != STDOUT_FILENO)
	{
		dup2(fds->saved_stdout, STDOUT_FILENO);
		close(fds->saved_stdout);
	}
}

void	ft_check_directory(t_data *data, t_cmd *cmd)
{
	struct stat	stat_info;

	if (stat(cmd->args[0], &stat_info) == 0 && S_ISDIR(stat_info.st_mode))
	{
		is_a_directory(cmd->args[0]);
		free_cmd_list(data);
		free_data(data);
		exit(126);
	}
}

void	ft_exit_with_error(t_data *data, t_cmd *cmd, char *msg, int code)
{
	(void)cmd;
	ft_putstr_fd(msg, 2);
	free_cmd_list(data);
	free_data(data);
	exit(code);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_exit.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/17 19:11:06 by garside           #+#    #+#             */
/*   Updated: 2025/05/27 15:07:09 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"

int	ft_isalldigit(char *str)
{
	int	i;

	i = 0;
	while (str[i])
	{
		if (!ft_isdigit(str[i]))
			return (0);
		i++;
	}
	return (1);
}

static void	error_allnum(t_data *data, t_cmd *cmd)
{
	ft_putstr_fd("exit: ", 1);
	ft_putstr_fd(cmd->args[1], 1);
	ft_putstr_fd(": numeric argument required\n", 1);
	close(cmd->fds->saved_stdin);
	close(cmd->fds->saved_stdout);
	free_cmd_list(data);
	free_data(data);
	exit(2);
}

int	ft_exit(t_data *data, t_cmd *cmd, t_exec_fd *fds)
{
	if (!cmd->args[1])
	{
		close(fds->saved_stdin);
		close(fds->saved_stdout);
		free_cmd_list(data);
		free_data(data);
		ft_printf("exit\n");
		exit(0);
	}
	else if (!ft_isalldigit(cmd->args[1]))
		error_allnum(data, cmd);
	else if (!cmd->args[1])
		return (ft_putstr_fd("exit: too many arguments\n", 2), 1);
	g_status = ft_atoi(cmd->args[1]);
	close(fds->saved_stdin);
	close(fds->saved_stdout);
	free_cmd_list(data);
	free_data(data);
	ft_printf("exit\n");
	exit(g_status);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_export_utils_1.c                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/30 14:05:40 by garside           #+#    #+#             */
/*   Updated: 2025/05/28 17:35:59 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"

int	ft_is_valid(char *str)
{
	int	i;

	i = 0;
	if (!ft_isalpha(str[0]) && str[0] != '_')
		return (1);
	while (str[i])
	{
		if (ft_isalnum(str[i]) && str[i] == '_')
			return (1);
		i++;
	}
	return (0);
}

int	check_name(char *str, t_env *node, char *content)
{
	t_env	*current;

	current = node;
	while (current)
	{
		if (ft_strcmp(current->name, str) == 0)
		{
			if (content)
			{
				free(current->content);
				current->content = ft_strdup(content);
				return (1);
			}
			return (1);
		}
		current = current->next;
	}
	return (0);
}

char	*get_content(char *str, int i)
{
	if (str[i] == '=')
		return (ft_substr(str, i + 1, ft_strlen(str) - (i + 1)));
	return (NULL);
}
void	handle_existing_name(t_data *data, char *name, char *content)
{
	t_env	*new_env;

	if (!check_name(name, data->env, content) && content)
	{
		new_env = env_new(name, content);
		ft_lstadd_back_env(&data->env, new_env);
	}
	free_name_content(name, content);
}

int	add_in_export(t_data *data, char *str)
{
	int		i;
	char	*name;
	char	*content;
	t_env	*new_export;
	t_env	*new_env;

	i = 0;
	while (str[i] && str[i] != '=')
		i++;
	name = ft_substr(str, 0, i);
	content = get_content(str, i);
	if (check_name(name, data->export, content))
		return (handle_existing_name(data, name, content), 0);
	new_export = env_new(name, content);
	new_env = env_new(name, content);
	if (content)
		ft_lstadd_back_env(&data->env, new_env);
	else
		free_env_list(new_env);
	ft_lstadd_back_env(&data->export, new_export);
	free_name_content(name, content);
	return (0);
}

static void	print_export_list(t_env *export)
{
	while (export)
	{
		if (!export->content)
			ft_printf("declare -x %s\n", export->name);
		else
			ft_printf("declare -x %s=\"%s\"\n", export->name, export->content);
		export = export->next;
	}
}

static int	export_variable(t_data *data, t_cmd *cmd)
{
	int	i;

	i = 0;
	while (cmd->args[i])
	{
		if (ft_is_valid(cmd->args[i]) != 0)
		{
			ft_putstr_fd("export: `", 2);
			ft_putstr_fd(cmd->args[i], 2);
			ft_putstr_fd("': not a valid identifier\n", 2);
			return (1);
		}
		add_in_export(data, cmd->args[i]);
		i++;
	}
	return (0);
}

int	ft_export(t_data *data)
{
	t_cmd	*cmd;

	cmd = data->cmd_list;
	if (!cmd->args[1])
	{
		print_export_list(data->export);
		return (0);
	}
	return (export_variable(data, cmd));
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_here_doc.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/21 19:49:33 by garside           #+#    #+#             */
/*   Updated: 2025/05/28 16:16:01 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"

void	made_new_file(int *fd, char **name)
{
	static int	nb_file = 0;
	char		*tmp_res;

	tmp_res = ft_itoa(nb_file);
	*name = ft_strjoin("/tmp/here_doc_", tmp_res);
	*fd = open(*name, O_RDWR | O_CREAT | O_TRUNC, 0644);
	free(tmp_res);
	nb_file++;
}

void	fill_here_doc_file(int fd, char *delimitor)
{
	char	*str;

	while (1)
	{
		str = readline("> ");
		if (str == NULL)
		{
			ft_printf("bash: warning: here-document delimited"
						" by end-of-file (wanted `%s')\n",
						delimitor);
			break ;
		}
		if (ft_strcmp(str, delimitor) == 0)
		{
			free(str);
			break ;
		}
		ft_putstr_fd(str, fd);
		ft_putchar_fd('\n', fd);
		free(str);
	}
}

char	*get_here_doc(char *str)
{
	char	*file_name;
	char	*delimitor;
	int		here_doc_fd;

	delimitor = ft_strdup(str);
	file_name = NULL;
	made_new_file(&here_doc_fd, &file_name);
	if (here_doc_fd == -1)
		return (ft_printf("error to create a tmp file\n"), NULL);
	fill_here_doc_file(here_doc_fd, delimitor);
	close(here_doc_fd);
	free(delimitor);
	return (file_name);
}
char	*handle_error_code(t_data *data, char *value, int *i)
{
	char	*tmp;
	char	*temp;

	(void)data;
	(*i) += 2;
	tmp = ft_itoa(g_status);
	temp = ft_strjoin(value, tmp);
	free(tmp);
	if (value)
		free(value);
	value = temp;
	return (value);
}

void	add_token_to_list(t_token **head, t_token **last, t_token *new_token)
{
	if (!*head)
		*head = new_token;
	else
		(*last)->next = new_token;
	*last = new_token;
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lexer_utils_2.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/30 13:10:25 by garside           #+#    #+#             */
/*   Updated: 2025/05/30 16:59:46 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"

char	*handle_env_value(t_data *data, int *i, char *value)
{
	char	*tmp;
	char	*temp;

	if (data->input[*i + 1] == '?')
		return (handle_error_code(data, value, i));
	tmp = change_env(data, i);
	temp = ft_strjoin(value, tmp);
	free(tmp);
	free(value);
	return (temp);
}

char	*handle_plain_text(t_data *data, int *i, char *value)
{
	int		start;
	int		len;
	char	*tmp;
	char	*temp;

	start = *i;
	while (is_skippable_char(data->input[*i]))
		(*i)++;
	len = *i - start;
	tmp = ft_substr(data->input, start, len);
	temp = ft_strjoin(value, tmp);
	free(tmp);
	free(value);
	return (temp);
}

t_token	*handle_pipe(int *i)
{
	char	*value;
	t_token	*token;

	value = ft_strdup("|");
	if (!value)
		return (NULL);
	token = new_token(value, PIPE);
	(*i)++;
	free(value);
	return (token);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lexer.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/14 18:38:51 by garside           #+#    #+#             */
/*   Updated: 2025/05/23 11:48:03 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"
#include "../octolib/includes/libft.h"

char	*handle_quotes_part(t_data *data, int *i, char *value)
{
	char	*tmp;
	char	*temp;

	tmp = handle_quotes(data, i);
	temp = ft_strjoin(value, tmp);
	free(tmp);
	free(value);
	return (temp);
}

t_token	*handle_cmd_or_arg(t_data *data, int *i)
{
	char	*value;
	t_token	*token;

	value = NULL;
	while (is_token_char(data->input[*i]))
	{
		if (data->input[*i] == '$')
			value = handle_env_value(data, i, value);
		else
		{
			value = handle_plain_text(data, i, value);
			if (data->input[*i] == '\'' || data->input[*i] == '\"')
				value = handle_quotes_part(data, i, value);
		}
	}
	token = new_token(value, WORD);
	free(value);
	return (token);
}

t_token	*handle_double_redir(char *input, int *i)
{
	if (input[*i] == '>' && input[*i + 1] == '>')
	{
		if (input[*i + 2] == '>')
		{
			ft_putstr_fd("syntax error near unexpected token `>>'\n", 2);
			return (NULL);
		}
		(*i) += 2;
		return (new_token(">>", APPEND));
	}
	if (input[*i] == '<' && input[*i + 1] == '<')
	{
		if (input[*i + 2] == '<')
		{
			ft_putstr_fd("syntax error near unexpected token `newline'\n", 2);
			return (NULL);
		}
		(*i) += 2;
		return (new_token("<<", HEREDOC));
	}
	return (NULL);
}

t_token	*handle_redirection(char *input, int *i)
{
	t_token	*token;

	token = handle_double_redir(input, i);
	if (token)
		return (token);
	if (input[*i] == '>')
	{
		(*i)++;
		return (new_token(">", REDIRECTION_OUT));
	}
	if (input[*i] == '<')
	{
		(*i)++;
		return (new_token("<", REDIRECTION_IN));
	}
	return (NULL);
}

void	skip_whitespace(const char *input, int *i)
{
	while (input[*i] == ' ' || input[*i] == '\t')
		(*i)++;
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_parce_util_1.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/23 12:18:56 by bcaumont          #+#    #+#             */
/*   Updated: 2025/05/30 18:02:23 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"

void	add_arg(t_cmd *cmd, char *value)
{
	int		i;
	char	**new_args;

	i = 0;
	if (cmd->args)
	{
		while (cmd->args[i])
			i++;
	}
	new_args = malloc(sizeof(char *) * (i + 2));
	if (!new_args)
		return ;
	i = 0;
	if (cmd->args)
	{
		while (cmd->args[i])
		{
			new_args[i] = ft_strdup(cmd->args[i]);
			i++;
		}
		free_split(cmd->args);
	}
	new_args[i++] = ft_strdup(value);
	new_args[i] = NULL;
	cmd->args = new_args;
}

void	add_redir(t_redir **redir_list, char *filename, int type)
{
	t_redir	*new_node;
	t_redir	*tmp;

	new_node = malloc(sizeof(t_redir));
	if (!new_node)
		return ;
	if (type == HEREDOC)
		new_node->file = get_here_doc(filename);
	else
		new_node->file = ft_strdup(filename);
	new_node->type = type;
	new_node->next = NULL;
	if (*redir_list == NULL)
		*redir_list = new_node;
	else
	{
		tmp = *redir_list;
		while (tmp->next)
			tmp = tmp->next;
		tmp->next = new_node;
	}
}

void	print_redirs(t_redir *redir)
{
	const char	*type_str = NULL;

	while (redir)
	{
		if (redir->type == REDIRECTION_IN)
			type_str = "<";
		else if (redir->type == HEREDOC)
			type_str = "<<";
		else if (redir->type == REDIRECTION_OUT)
			type_str = ">";
		else if (redir->type == APPEND)
			type_str = ">>";
		else
			type_str = "?";
		printf("  %s %s\n", type_str, redir->file);
		redir = redir->next;
	}
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_parce_util_2.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/28 09:19:03 by bcaumont          #+#    #+#             */
/*   Updated: 2025/05/31 12:18:09 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"

t_cmd	*parse_tokens(t_data *data)
{
	t_cmd	*head;
	t_cmd	*curr;
	t_token	*token;

	head = NULL;
	curr = NULL;
	token = data->token;
	while (token)
	{
		init_cmd_node(&curr, &head);
		if (token->type == WORD)
			add_arg(curr, token->value);
		else if (token->type == REDIRECTION_IN && token->next)
			add_redir(&curr->infile, token->next->value, REDIRECTION_IN);
		else if (token->type == REDIRECTION_OUT && token->next)
			add_redir(&curr->outfile, token->next->value, REDIRECTION_OUT);
		else if (token->type == APPEND && token->next)
			add_redir(&curr->outfile, token->next->value, APPEND);
		else if (token->type == HEREDOC && token->next)
			add_redir(&curr->infile, token->next->value, HEREDOC);
		else if (token->type == PIPE)
			add_pipe_node(&curr);
		token = token->next;
	}
	return (head);
}

void	add_pipe_node(t_cmd **curr)
{
	(*curr)->next = new_cmd_node();
	*curr = (*curr)->next;
}

void	init_cmd_node(t_cmd **curr, t_cmd **head)
{
	if (!*curr)
	{
		*curr = new_cmd_node();
		if (!*head)
			*head = *curr;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_parse_1.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/23 12:20:54 by bcaumont          #+#    #+#             */
/*   Updated: 2025/05/30 17:21:27 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"

static void	print_pipe_error(void)
{
	g_status = 2;
	printf("%s `|'\n", ERR_SYNT);
}

int	parse(t_data *data)
{
	t_token	*token;

	if (!data->input)
		return (1);
	data->token = ft_lexer(data);
	if (!data->token)
		return (1);
	token = data->token;
	if (check_tokens_validity(token) == 1)
		return (1);
	if (token->type == PIPE)
		return (printf("%s `|'\n", ERR_SYNT), 1);
	while (token && token->next)
		token = token->next;
	if (token->type == PIPE)
		return (print_pipe_error(), 1);
	data->cmd_list = parse_tokens(data);
	if (!data->cmd_list)
		return (1);
	if (!data->cmd_list->args && !data->cmd_list->outfile
		&& !data->cmd_list->infile)
		return (1);
	return (0);
}

int	check_tokens_validity(t_token *token)
{
	t_token	*tmp;

	tmp = token;
	while (tmp)
	{
		if (tmp->type != WORD && !tmp->next && tmp->type != PIPE)
		{
			g_status = 2;
			return (printf("%s `newline`\n", ERR_SYNT), 1);
		}
		if (tmp->type == PIPE && tmp->next && tmp->next->type == PIPE)
		{
			g_status = 2;
			return (printf("%s `|`\n", ERR_SYNT), 1);
		}
		if ((tmp->type != WORD && tmp->type != PIPE) && (tmp->next
				&& tmp->next->type != WORD))
		{
			g_status = 2;
			return (printf("%s `%s`\n", ERR_SYNT, tmp->next->value), 1);
		}
		tmp = tmp->next;
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_parse.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/02 14:13:50 by garside           #+#    #+#             */
/*   Updated: 2025/05/28 17:47:46 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"
#include "../octolib/includes/libft.h"

t_env	*env_new(char *name, char *value)
{
	t_env	*new_env;

	new_env = malloc(sizeof(t_env));
	if (!new_env)
		return (NULL);
	new_env->name = ft_strdup(name);
	if (value)
		new_env->content = ft_strdup(value);
	else
		new_env->content = NULL;
	new_env->next = NULL;
	new_env->prev = NULL;
	return (new_env);
}

t_token	*get_next_token(t_data *data, int *i)
{
	if (data->input[*i] == '>' || data->input[*i] == '<')
		return (handle_redirection(data->input, i));
	if (data->input[*i] == '|')
		return (handle_pipe(i));
	return (handle_cmd_or_arg(data, i));
}

t_token	*ft_lexer(t_data *data)
{
	int		i;
	t_token	*head;
	t_token	*last;
	t_token	*current;

	i = 0;
	head = NULL;
	last = NULL;
	while (data->input[i])
	{
		skip_whitespace(data->input, &i);
		if (!data->input[i])
			break ;
		current = get_next_token(data, &i);
		if (!current)
			return (NULL);
		add_token_to_list(&head, &last, current);
	}
	return (head);
}

void	print_tokens(t_data *data)
{
	while (data->token)
	{
		printf("token value: %s type %d\n", data->token->value,
			data->token->type);
		data->token = data->token->next;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_pipe_1.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/23 12:22:54 by bcaumont          #+#    #+#             */
/*   Updated: 2025/05/27 17:01:28 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"

void	exec_child(t_data *data, t_cmd *cmd, t_exec_fd *fds)
{
	reset_signals_child();
	signal(SIGPIPE, SIG_IGN);
	if (redirect_management(cmd, fds) == -1)
		ft_exit_exec(1, data, cmd);
	if (is_builtin(cmd->args[0]))
		ft_exit_exec(run_builtin(data, cmd, fds), data, cmd);
	g_status = handle_exec(data, cmd);
	ft_exit_exec(127, data, cmd);
}

int	ft_process(t_data *data, t_cmd *cmd, t_exec_fd *fds)
{
	pid_t	pid;
	int		ret;

	ret = 0;
	ret = prepare_cmd_path(data, cmd);
	if (ret != 0)
		return (ret);
	pid = fork();
	if (pid < 0)
	{
		perror("fork");
		return (CODE_FAIL);
	}
	if (pid == 0)
		exec_child(data, cmd, fds);
	if (cmd->path)
	{
		free(cmd->path);
		cmd->path = NULL;
	}
	return (pid);
}

int	ft_charnull(t_cmd *cmd)
{
	(void)cmd;
	return (0);
}

int	handle_exec(t_data *data, t_cmd *cmd)
{
	if (cmd->args[0][0] == '.' || cmd->args[0][0] == '/')
	{
		if (access(cmd->args[0], F_OK) == -1)
			no_such_file_or_directory(cmd->args[0]);
		else if (access(cmd->args[0], X_OK) == -1)
			permission_denied(cmd->args[0]);
		else
			execve(cmd->args[0], cmd->args, data->envp);
		return (126);
	}
	if (cmd->path)
	{
		if (access(cmd->path, X_OK) == -1)
			permission_denied(cmd->path);
		else
			execve(cmd->path, cmd->args, data->envp);
		error_message(cmd->args[0]);
		return (126);
	}
	error_message(cmd->args[0]);
	return (127);
}

int	prepare_cmd_path(t_data *data, t_cmd *cmd)
{
	if (cmd->args && cmd->args[0] && !is_builtin(cmd->args[0])
		&& cmd->args[0][0] != '.' && cmd->args[0][0] != '/')
	{
		cmd->path = find_cmd_path(cmd->args[0], data);
		if (!cmd->path)
		{
			ft_putstr_fd(cmd->args[0], 2);
			ft_putstr_fd(": command not found\n", 2);
			return (127);
		}
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_pipe_manage_file.c                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/16 01:28:30 by garside           #+#    #+#             */
/*   Updated: 2025/05/30 17:01:55 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"

int	open_infile(char *str)
{
	int	fd;

	fd = open(str, O_RDONLY);
	if (fd == -1)
	{
		if (access(str, F_OK) == -1)
			no_such_file_or_directory(str);
		else if (access(str, R_OK) == -1)
			permission_denied(str);
		else
			error_message(str);
	}
	return (fd);
}

int	last_infile(t_cmd *cmd)
{
	int		fd;
	t_redir	*infile;

	cmd->prev_fd = -1;
	infile = cmd->infile;
	while (infile)
	{
		fd = open_infile(infile->file);
		if (fd == -1)
		{
			if (cmd->prev_fd != -1)
				safe_close(cmd->prev_fd);
			return (-1);
		}
		if (cmd->prev_fd != -1)
			safe_close(cmd->prev_fd);
		cmd->prev_fd = fd;
		infile = infile->next;
	}
	return (fd);
}

int	manag_infile(t_cmd *cmd, t_exec_fd *fds)
{
	int	in_fd;

	if (cmd->infile == NULL && fds->prev_fd == 0)
		return (0);
	if (cmd->infile == NULL && fds->prev_fd != 0)
		return (dup2(fds->prev_fd, PIPE_READ), safe_close(fds->prev_fd), 0);
	if (fds->prev_fd != 0)
		safe_close(fds->prev_fd);
	in_fd = last_infile(cmd);
	if (in_fd == -1)
		return (1);
	return (dup2(in_fd, PIPE_READ), safe_close(in_fd), 0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_pipe_manage_file_1.c                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/23 12:24:03 by bcaumont          #+#    #+#             */
/*   Updated: 2025/05/30 17:01:59 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"

int	manag_outfile(t_cmd *cmd, int *pipe_fd)
{
	int	out_fd;

	if (cmd->outfile == NULL && cmd->next == NULL)
		return (0);
	if (cmd->outfile == NULL)
	{
		if (pipe_fd[1] >= 0)
			dup2(pipe_fd[1], 1);
		return (0);
	}
	out_fd = last_outfile(cmd);
	if (out_fd == -1)
	{
		if (pipe_fd[1] >= 0)
			dup2(pipe_fd[1], 1);
		return (-1);
	}
	dup2(out_fd, 1);
	close(out_fd);
	return (0);
}

int	open_outfile(char *file, t_TokenType mode)
{
	int	fd;

	if (mode == APPEND)
		fd = open(file, O_WRONLY | O_CREAT | O_APPEND, 0644);
	else
		fd = open(file, O_WRONLY | O_CREAT | O_TRUNC, 0644);
	if (fd == -1)
	{
		if (access(file, F_OK) == -1)
			no_such_file_or_directory(file);
		else if (access(file, W_OK) == -1)
			permission_denied(file);
		else
			error_message(file);
	}
	return (fd);
}

int	last_outfile(t_cmd *cmd)
{
	int		fd;
	int		prev_fd;
	t_redir	*outfile;

	outfile = cmd->outfile;
	prev_fd = -1;
	while (outfile)
	{
		fd = open_outfile(outfile->file, outfile->type);
		if (fd == -1)
		{
			if (prev_fd != -1)
				safe_close(prev_fd);
			return (-1);
		}
		if (prev_fd != -1)
			safe_close(prev_fd);
		prev_fd = fd;
		outfile = outfile->next;
	}
	return (fd);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_pipe.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/15 21:27:48 by garside           #+#    #+#             */
/*   Updated: 2025/05/27 15:19:24 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"

void	ft_exit_exec(int code, t_data *data, t_cmd *cmd)
{
	if (cmd && cmd->path)
		free(cmd->path);
	if (data)
	{
		free_cmd_list(data);
		free_data(data);
	}
	exit(code);
}

void	safe_close(int fd)
{
	if (fd >= 0)
		close(fd);
}

bool	is_builtin(char *cmd)
{
	if (!cmd)
		return (false);
	if (ft_strcmp(cmd, "echo") == 0)
		return (true);
	if (ft_strcmp(cmd, "cd") == 0)
		return (true);
	if (ft_strcmp(cmd, "pwd") == 0)
		return (true);
	if (ft_strcmp(cmd, "export") == 0)
		return (true);
	if (ft_strcmp(cmd, "unset") == 0)
		return (true);
	if (ft_strcmp(cmd, "env") == 0)
		return (true);
	if (ft_strcmp(cmd, "exit") == 0)
		return (true);
	return (false);
}

int	redirect_management(t_cmd *cmd, t_exec_fd *fds)
{
	if (manag_infile(cmd, fds) == -1)
	{
		safe_close(cmd->pipe_fd[0]);
		safe_close(cmd->pipe_fd[1]);
		return (1);
	}
	if (manag_outfile(cmd, cmd->pipe_fd) == -1)
	{
		safe_close(cmd->pipe_fd[0]);
		safe_close(cmd->pipe_fd[1]);
		return (1);
	}
	safe_close(cmd->pipe_fd[0]);
	safe_close(cmd->pipe_fd[1]);
	return (0);
}

int	run_builtin(t_data *data, t_cmd *cmd, t_exec_fd *fds)
{
	if (!cmd->args || !cmd->args[0])
		return (1);
	if (ft_strcmp(cmd->args[0], "cd") == 0)
		return (ft_cd(data));
	else if (ft_strcmp(cmd->args[0], "echo") == 0)
		return (ft_echo(data, cmd));
	else if (ft_strcmp(cmd->args[0], "env") == 0)
		return (ft_env(data));
	else if (ft_strcmp(cmd->args[0], "exit") == 0)
		return (ft_exit(data, cmd, fds));
	else if (ft_strcmp(cmd->args[0], "export") == 0)
		return (ft_export(data));
	else if (ft_strcmp(cmd->args[0], "pwd") == 0)
		return (ft_pwd());
	else if (ft_strcmp(cmd->args[0], "unset") == 0)
		return (ft_unset(data));
	else if (ft_strcmp(cmd->args[0], ":") == 0)
		return (ft_charnull(cmd));
	return (1);
}
int	ft_pwd(void)
{
	char	cwd[1024];

	if (getcwd(cwd, sizeof(cwd)) == NULL)
	{
		perror("pwd");
		return (1);
	}
	printf("%s\n", cwd);
	return (0);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_quote_utils_1.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/30 13:35:05 by garside           #+#    #+#             */
/*   Updated: 2025/05/23 11:49:07 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"

int	check_quotes(char *input)
{
	int	i;

	i = 0;
	while (input[i])
	{
		if (input[i] == '\'')
		{
			i++;
			while (input[i] && (input[i] != '\''))
				i++;
			if (!input[i])
				return (ft_putstr_fd("quote error\n", 2), 1);
		}
		if (input[i] == '\"')
		{
			i++;
			while (input[i] && (input[i] != '\"'))
				i++;
			if (!input[i])
				return (ft_putstr_fd("quote error\n", 2), 1);
		}
		i++;
	}
	return (0);
}

char	*ft_get_env(char *str, t_data *data)
{
	t_env	*current;
	char	*value;
	int		len;

	current = data->env;
	len = ft_strlen(str);
	while (current)
	{
		if (ft_strcmp(str, current->name) == 0)
		{
			value = ft_strdup(current->content);
			return (value);
		}
		current = current->next;
	}
	return (NULL);
}

char	*change_env(t_data *data, int *i)
{
	int		first;
	int		last;
	char	*name;
	char	*value;

	(*i)++;
	first = (*i);
	while (ft_isalnum(data->input[*i]) || data->input[*i] == '_')
		(*i)++;
	last = (*i);
	name = ft_substr(data->input, first, last - first);
	if (!name[0])
		return (free(name), ft_strdup("$"));
	value = ft_get_env(name, data);
	free(name);
	return (value);
}

char	*append_error_code(t_data *data, char *extract, int *i, int *first)
{
	int		last;
	char	*tmp;
	char	*temp;

	last = *i;
	tmp = ft_substr(data->input, *first + 1, last - *first - 1);
	temp = ft_strjoin(extract, tmp);
	free(tmp);
	free(extract);
	extract = handle_error_code(data, temp, i);
	*first = *i - 1;
	return (extract);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_quote.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/14 18:38:39 by garside           #+#    #+#             */
/*   Updated: 2025/05/31 15:33:18 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"
#include "../octolib/includes/libft.h"

char	*append_env_variable(t_data *data, char *extract, int *i, int *first)
{
	int		last;
	char	*teemp;
	char	*tmp;
	char	*temp;

	last = *i;
	teemp = ft_substr(data->input, *first + 1, last - *first - 1);
	tmp = change_env(data, i);
	*first = *i - 1;
	temp = ft_strjoin(teemp, tmp);
	free(teemp);
	free(tmp);
	teemp = ft_strjoin(extract, temp);
	free(temp);
	free(extract);
	return (teemp);
}

char	*append_remaining_segment(t_data *data, char *extract, int first, int i)
{
	char	*tmp;
	char	*temp;

	tmp = ft_substr(data->input, first + 1, i - first - 1);
	temp = ft_strjoin(extract, tmp);
	free(tmp);
	free(extract);
	return (temp);
}

char	*extract_word_double(t_data *data, int *i)
{
	int		first;
	char	*extract;

	extract = NULL;
	first = (*i)++;
	while (data->input[*i] && data->input[*i] != '\"')
	{
		if (data->input[*i] == '$')
		{
			if (data->input[*i + 1] == '?')
				extract = append_error_code(data, extract, i, &first);
			else
				extract = append_env_variable(data, extract, i, &first);
		}
		else
			(*i)++;
	}
	extract = append_remaining_segment(data, extract, first, *i);
	(*i)++;
	return (extract);
}

char	*extract_word_single(char *input, int *i)
{
	int		first;
	int		last;
	char	*extract;

	first = (*i);
	(*i)++;
	while (input[*i] != '\'')
		(*i)++;
	last = (*i);
	extract = ft_substr(input, first + 1, (last - first - 1));
	(*i)++;
	return (extract);
}

char	*handle_quotes(t_data *data, int *i)
{
	char	*word;

	word = NULL;
	if (data->input[*i] && data->input[*i] == '\"')
		word = extract_word_double(data, i);
	else if (data->input[*i] == '\'')
		word = extract_word_single(data->input, i);
	return (word);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   unset.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/26 19:06:08 by garside           #+#    #+#             */
/*   Updated: 2025/05/23 11:50:40 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"

void	remove_from_list(t_env **list, char *name)
{
	t_env	*current;
	t_env	*prev;

	current = *list;
	prev = NULL;
	while (current)
	{
		if (ft_strcmp(current->name, name) == 0)
		{
			if (prev)
				prev->next = current->next;
			else
				*list = current->next;
			if (current->next)
				current->next->prev = prev;
			free(current->name);
			free(current->content);
			free(current);
			return ;
		}
		prev = current;
		current = current->next;
	}
}

int	ft_unset(t_data *data)
{
	int		i;
	t_cmd	*cmd;

	i = 0;
	cmd = data->cmd_list;
	if (!cmd->args[1])
		return (1);
	while (cmd->args[i])
	{
		remove_from_list(&data->env, cmd->args[i]);
		remove_from_list(&data->export, cmd->args[i]);
		i++;
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/04/28 17:20:10 by garside           #+#    #+#             */
/*   Updated: 2025/05/28 17:07:46 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"
#include "../octolib/includes/libft.h"
#include <stdio.h>
#include <stdlib.h>

volatile sig_atomic_t	g_status = 0;

t_env	*init_env_list(char **env)
{
	t_env	*env_list;
	t_env	*new_env;
	char	*sep;
	int		i;

	env_list = NULL;
	i = 0;
	while (env[i])
	{
		sep = ft_strchr(env[i], '=');
		if (sep)
		{
			*sep = '\0';
			new_env = env_new(env[i], sep + 1);
			*sep = '=';
			if (!new_env)
			{
				i++;
				continue ;
			}
			ft_lstadd_back_env(&env_list, new_env);
		}
		i++;
	}
	return (env_list);
}

void	sort(char **tmp)
{
	char	*swap;
	int		i;
	int		j;

	j = 0;
	while (tmp[j])
	{
		i = 1;
		while (tmp[i])
		{
			if (ft_strcmp(tmp[i - 1], tmp[i]) > 0)
			{
				swap = tmp[i - 1];
				tmp[i - 1] = tmp[i];
				tmp[i] = swap;
			}
			i++;
		}
		j++;
	}
}

t_env	*init_export_list(char **env)
{
	t_env	*export;
	char	**tmp;
	int		i;

	i = 0;
	while (env[i])
		i++;
	tmp = malloc(sizeof(char *) * (i + 1));
	i = -1;
	while (env[++i])
		tmp[i] = ft_strdup(env[i]);
	tmp[i] = NULL;
	sort(tmp);
	export = init_env_list(tmp);
	free_split(tmp);
	return (export);
}

void	read_prompt(t_data *data)
{
	while (1)
	{
		data->token = NULL;
		data->input = readline(PROMPT);
		if (!data->input)
		{
			ft_printf("exit\n");
			break ;
		}
		if (data->input[0] && !check_quotes(data->input))
		{
			add_history(data->input);
			init_fds(&data->fds);
			if (parse(data) == 0)
				g_status = exec_line(data, data->cmd_list);
			if (data->cmd_list)
				free_cmd_list(data);
			if (data->token)
				free_token(data->token);
		}
		free(data->input);
	}
}

int	main(int ac, char **av, char **env)
{
	t_data	data;

	(void)ac;
	(void)av;
	init_data(&data);
	data.envp = env;
	data.env = init_env_list(env);
	data.export = init_export_list(env);
	init_signal();
	read_prompt(&data);
	free_env_list(data.env);
	free_env_list(data.export);
	rl_clear_history();
	return (g_status);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_pipe_error.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/16 02:51:50 by garside           #+#    #+#             */
/*   Updated: 2025/05/23 11:48:29 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"

void	command_not_found(char *cmd)
{
	ft_putstr_fd("Minishell:~$ ", 2);
	ft_putstr_fd(cmd, 2);
	ft_putstr_fd(": Command not found\n", 2);
}

void	no_such_file_or_directory(char *cmd)
{
	ft_putstr_fd("Minishell:~$ ", 2);
	ft_putstr_fd(cmd, 2);
	ft_putstr_fd(": No such file or directory\n", 2);
}

void	permission_denied(char *file)
{
	ft_putstr_fd("Minishell:~$ ", 2);
	ft_putstr_fd(file, 2);
	ft_putstr_fd(": Permission denied\n", 2);
}

void	error_message(char *str)
{
	ft_putstr_fd("Minishell:~$ ", 2);
	perror(str);
}

void	is_a_directory(char *str)
{
	ft_putstr_fd("Minishell:~$ ", 2);
	ft_putstr_fd(str, 2);
	ft_putstr_fd(": Is a directory\n", 2);
}
void	handle_sigint(int sig)
{
	(void)sig;
	write(STDOUT_FILENO, "\n", 1);
	rl_replace_line("", 0);
	rl_on_new_line();
	rl_redisplay();
}

void	init_signal(void)
{
	signal(SIGINT, handle_sigint);
	signal(SIGQUIT, SIG_IGN);
}

void	reset_signals_child(void)
{
	signal(SIGINT, SIG_DFL);
	signal(SIGQUIT, SIG_DFL);
}
void	free_env_list(t_env *new_list)
{
	t_env	*temp;

	while (new_list)
	{
		temp = new_list;
		new_list = new_list->next;
		free(temp->name);
		if (temp->content)
			free(temp->content);
		free(temp);
	}
}

void	free_one_token(t_token *token)
{
	if (!token->value)
		return ;
	free(token->value);
	if (!token)
		return ;
	free(token);
}

void	free_token(t_token *head)
{
	t_token	*tmp;

	while (head != NULL)
	{
		tmp = head->next;
		if (!head)
			return ;
		free_one_token(head);
		head = tmp;
	}
}
void	free_split(char **tmp)
{
	int	i;

	i = 0;
	if (tmp)
	{
		while (tmp[i])
		{
			free(tmp[i]);
			tmp[i] = NULL;
			i++;
		}
		free(tmp);
		tmp = NULL;
	}
}

void	free_cmd_list(t_data *data)
{
	t_cmd	*current;
	t_cmd	*next;

	if (!data || !data->cmd_list)
		return ;
	current = data->cmd_list;
	while (current)
	{
		next = current->next;
		if (current->outfile)
			free_redir_list(current->outfile);
		if (current->infile)
			free_redir_list(current->infile);
		if (current->args)
			free_split(current->args);
		free(current);
		current = next;
	}
	data->cmd_list = NULL;
}

void	free_redir_list(t_redir *redir)
{
	t_redir	*tmp;

	while (redir)
	{
		tmp = redir->next;
		if (redir->file)
			free(redir->file);
		free(redir);
		redir = tmp;
	}
}

void	free_data(t_data *data)
{
	if (!data)
		return ;
	free_env_list(data->env);
	free_env_list(data->export);
	free(data->input);
	free_token(data->token);
}

void	free_name_content(char *name, char *content)
{
	free(name);
	if (content)
		free(content);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   structure_init.c                                   :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/28 17:10:29 by bcaumont          #+#    #+#             */
/*   Updated: 2025/05/28 17:19:45 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"

void	init_data(t_data *data)
{
	data->cmd_list = NULL;
	data->env = NULL;
	data->envp = NULL;
	data->export = NULL;
	data->input = NULL;
	data->token = NULL;
	data->token_count = 0;
}

t_cmd	*new_cmd_node(void)
{
	t_cmd	*cmd;

	cmd = malloc(sizeof(t_cmd));
	if (!cmd)
		return (NULL);
	cmd->args = NULL;
	cmd->path = NULL;
	cmd->infile = NULL;
	cmd->outfile = NULL;
	cmd->next = NULL;
	cmd->prev_fd = -1;
	cmd->pipe_fd[0] = -1;
	cmd->pipe_fd[1] = -1;
	return (cmd);
}

void	init_fds(t_exec_fd *fds)
{
	fds->prev_fd = -1;
	fds->saved_stdin = -1;
	fds->saved_stdout = -1;
}

t_token	*new_token(char *value, t_TokenType type)
{
	t_token	*token;

	token = malloc(sizeof(t_token));
	if (!token)
		return (NULL);
	token->value = ft_strdup(value);
	token->type = type;
	token->next = NULL;
	return (token);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   tranform_in_tab.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/23 12:25:43 by bcaumont          #+#    #+#             */
/*   Updated: 2025/05/23 13:50:46 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"
#include "../octolib/includes/libft.h"

int	calcul_dynamique_len(t_env *tmp)
{
	int	len_name;
	int	len_content;

	len_name = ft_strlen(tmp->name);
	len_content = ft_strlen(tmp->content);
	return (len_name + len_content + 2);
}

int	size_list(t_env *tmp)
{
	int	count;

	count = 0;
	while (tmp)
	{
		count++;
		tmp = tmp->next;
	}
	return (count);
}

static char	**alloc_envp_array(t_env *env)
{
	int		size;
	char	**envp;

	size = size_list(env);
	envp = malloc(sizeof(char *) * (size + 1));
	if (!envp)
	{
		g_status = 1;
		ft_putstr_fd("Error\n:allocation fail\n", 2);
		return (NULL);
	}
	return (envp);
}

static int	fill_envp_array(t_env *env, char **envp)
{
	int		i;
	int		len;
	char	*line;

	i = 0;
	while (env)
	{
		len = calcul_dynamique_len(env);
		line = malloc(len);
		if (!line)
		{
			free_split(envp);
			return (0);
		}
		ft_strlcpy(line, env->name, len);
		ft_strlcat(line, "=", len);
		ft_strlcat(line, env->content, len);
		envp[i++] = line;
		env = env->next;
	}
	envp[i] = NULL;
	return (1);
}

char	**translate_in_tab(t_data *data)
{
	char	**envp;

	envp = alloc_envp_array(data->env);
	if (!envp)
		return (NULL);
	if (!fill_envp_array(data->env, envp))
		return (NULL);
	return (envp);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   utils.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bcaumont <bcaumont@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/05/30 16:58:27 by bcaumont          #+#    #+#             */
/*   Updated: 2025/05/30 17:00:12 by bcaumont         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../includes/minishell.h"

int	is_skippable_char(char c)
{
	return (c && c != '|' && c != '<' && c != '>' && c != ' ' && c != '\t'
		&& c != '\'' && c != '\"' && c != '$');
}

int	is_token_char(char c)
{
	return (c && c != '|' && c != '<' && c != '>' && c != ' ' && c != '\t');
}

char	*ft_strjoin_three(char *s1, char *s2, char *s3)
{
	char	*tmp;
	char	*result;

	if (!s1 || !s2 || !s3)
		return (NULL);
	tmp = ft_strjoin(s1, s2);
	if (!tmp)
		return (NULL);
	result = ft_strjoin(tmp, s3);
	free(tmp);
	return (result);
}





